#BlueJ class context
comment0.target=class\ EasyReader
comment0.text=\n\nWritten\ as\ part\ of\n\n<i>Java\ Methods\:\ An\ Introduction\ to\ Object-Oriented\ Programming</i>\n(Skylight\ Publishing\ 2001,\ ISBN\ 0-9654853-7-4)\n\nand\n\n<i>Java\ Methods\ AB\:\ Data\ Structures</i>\n(Skylight\ Publishing\ 2003,\ ISBN\ 0-9654853-1-5)\n\nEasyReader\ provides\ simple\ methods\ for\ reading\ the\ console\ and\nfor\ opening\ and\ reading\ text\ files.\ \ All\ exceptions\ are\ handled\ninside\ the\ class\ and\ are\ hidden\ from\ the\ user.\n\n<xmp>\nExample\:\n\=\=\=\=\=\=\=\n\nEasyReader\ console\ \=\ new\ EasyReader();\nSystem.out.print("Enter\ input\ file\ name\:\ ");\nString\ fileName\ \=\ console.readLine();\n\nEasyReader\ inFile\ \=\ new\ EasyReader(fileName);\nif\ (inFile.bad())\n{\nSystem.err.println("Can't\ open\ "\ +\ fileName);\nSystem.exit(1);\n}\n\nString\ firstLine\ \=\ inFile.readLine();\nif\ (\!inFile.eof())\ \ \ //\ or\:\ \ if\ (firstLine\ \!\=\ null)\nSystem.out.println("The\ first\ line\ is\ \:\ "\ +\ firstLine);\n\nSystem.out.print("Enter\ the\ maximum\ number\ of\ integers\ to\ read\:\ ");\nint\ maxCount\ \=\ console.readInt();\nint\ k,\ count\ \=\ 0;\n\nwhile\ (count\ <\ maxCount\ &&\ \!inFile.eof())\n{\nk\ \=\ inFile.readInt();\nif\ (\!inFile.eof())\n{\n//\ process\ or\ store\ this\ number\ncount++;\n}\n}\n\ninFile.close();\ \ \ \ //\ optional\nSystem.out.println(count\ +\ "\ numbers\ read");\n</xmp>\n\n@author\ Gary\ Litvin\n@version\ 1.2,\ 5/30/02\n\n
comment1.target=myErrorFlags
comment10.params=
comment10.target=String\ readWord()
comment10.text=\nSkips\ whitespace\ and\ reads\ the\ next\ word\ (a\ string\ of\ consecutive\nnon-whitespace\ characters\ (up\ to\ but\ excluding\ the\ next\ space,\nnewline,\ etc.)\n@return\ the\ read\ string\ or\ null\ if\ trying\ to\ read\ beyond\ the\ EOF\n\n
comment11.params=
comment11.target=char\ readChar()
comment11.text=\nReads\ the\ next\ character\ from\ a\ file\ (any\ character\ including\na\ space\ or\ a\ newline\ character).\n@return\ character\ read\ or\ <code>null</code>\ character\n(Unicode\ 0)\ if\ trying\ to\ read\ beyond\ the\ EOF\n\n
comment12.params=
comment12.target=boolean\ ready()
comment13.target=CLOSEERROR
comment14.params=
comment14.target=int\ readInt()
comment14.text=\nReads\ the\ next\ integer\ (without\ validating\ its\ format)\n@return\ the\ integer\ read\ or\ 0\ if\ trying\ to\ read\ beyond\ the\ EOF\n\n
comment15.params=
comment15.target=boolean\ eof()
comment15.text=\nChecks\ the\ EOF\ status\ of\ the\ file\n@return\ true\ if\ EOF\ was\ encountered\ in\ the\ previous\ read\noperation,\ false\ otherwise\n\n
comment16.params=
comment16.target=void\ close()
comment16.text=\nCloses\ the\ file\n\n
comment17.params=
comment17.target=EasyReader()
comment17.text=\nConstructor.\ \ Prepares\ console\ (System.in)\ for\ reading\n\n
comment18.params=fileName
comment18.target=EasyReader(String)
comment18.text=\nConstructor.\ \ opens\ a\ file\ for\ reading\n@param\ fileName\ the\ name\ or\ pathname\ of\ the\ file\n\n
comment2.params=
comment2.target=boolean\ bad()
comment2.text=\nChecks\ the\ status\ of\ the\ file\n@return\ true\ if\ en\ error\ occurred\ opening\ or\ reading\ the\ file,\nfalse\ otherwise\n\n
comment3.target=myFileName
comment4.params=
comment4.target=double\ readDouble()
comment4.text=\nReads\ the\ next\ double\ (without\ validating\ its\ format)\n@return\ the\ number\ read\ or\ 0\ if\ trying\ to\ read\ beyond\ the\ EOF\n\n
comment5.target=myInFile
comment6.target=EOF
comment7.target=READERROR
comment8.target=OPENERROR
comment9.params=
comment9.target=String\ readLine()
comment9.text=\nReads\ from\ the\ current\ position\ in\ the\ file\ up\ to\ and\ including\nthe\ next\ newline\ character.\ \ The\ newline\ character\ is\ thrown\ away\n@return\ the\ read\ string\ (excluding\ the\ newline\ character)\ or\nnull\ if\ trying\ to\ read\ beyond\ the\ EOF\n\n
numComments=19
